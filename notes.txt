Server/ back end
  created db
  created table
  installed packages for server: pg, cors, express, nodemon, dotenv
  connected db to express server code 
  Added route for getting all items and create a menu items
  Added and tested routes for deleting, getting, and updating an items
  

Client/front end
  Sketch a design for the front end
  Thinking in react(Componenet planning and frontend build):
    1. start w/ a mock
    2. break the UI into a heirarchy
    3. build a static version
    4. identify the minimal but complete representation of UI state
    5. Identify where your state should live
    6. Add inverse Data flow
  Continue building the static version: Avoiding adding state
  Add in the extra route pages: add, update, and home
  Use react-router-dom to navigate to other routes
  Access data from the backend (Context API for state management?)
    Create Axios instance to generate a base url and config
    With useState to capture the data on mount with useEffect (Temporary Solution)
    implement context api for state management of the data fetching
    search bar works with only the name of the menu items
  built static version of add item page
  Functionality and data of add item page, use AddApp.jsx for help
  Static version of update/delete page
  Autofills data to the form for easier updating
  when form is submitted send back to home page and edit in the database+context(just db as that is our source of truth which will in turn update the context when the homepage is rendered)
  Real time delete off the home page
  Added modal to handle the deletes more graciously instead of instantly
  TODO: Better ways to search up items (name, alt names, category)

  


    
